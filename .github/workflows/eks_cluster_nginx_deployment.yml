name: Deploy EKS and Install NGINX via Helm

on:
  push:
    branches:
      - main
      - dev
    paths:
      - '**.tf'

permissions:
  id-token: write
  contents: read

jobs:
  eks_cluster_nginx_deployment:
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with: 
          terraform_version: latest

        # Set the working directory based on the branch/environment
      - name: Set Working Directory
        id : set-dir
        run: echo "WORKING_DIR=./environment/${{ github.ref_name == 'main' && 'prod' || 'dev' }}" >> $GITHUB_ENV

        # Authenticate using AWS Credentials
      - name: Configure AWS Credentials (OIDC Role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ vars.TF_VAR_region }}
          
      - name: Verify identity
        run: aws sts get-caller-identity

      # Set Environment-Specific Variables (from GitHub Secrets or Environments)
      - name: Set Terraform Variables
        run: |
          echo 'TF_VAR_env=${{ vars.TF_VAR_env }}' >> $GITHUB_ENV
          echo 'TF_VAR_key=${{ vars.TF_VAR_key }}' >> $GITHUB_ENV
          echo 'TF_VAR_backend_bucket=${{ vars.TF_VAR_backend_bucket }}' >> $GITHUB_ENV
          echo 'TF_VAR_cidr_block=${{ vars.TF_VAR_cidr_block }}' >> $GITHUB_ENV
          echo 'TF_VAR_private_subnets_cidr=${{ vars.TF_VAR_private_subnets_cidr }}' >> $GITHUB_ENV
          echo 'TF_VAR_public_subnets_cidr=${{ vars.TF_VAR_public_subnets_cidr }}' >> $GITHUB_ENV
          echo 'TF_VAR_availability_zones=${{ vars.TF_VAR_availability_zones }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_name=${{ vars.TF_VAR_cluster_name }}' >> $GITHUB_ENV
          echo 'TF_VAR_cluster_version=${{ vars.TF_VAR_cluster_version }}' >> $GITHUB_ENV
          echo 'TF_VAR_max_size=${{ vars.TF_VAR_max_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_min_size=${{ vars.TF_VAR_min_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_desired_size=${{ vars.TF_VAR_desired_size }}' >> $GITHUB_ENV
          echo 'TF_VAR_instance_types=${{ vars.TF_VAR_instance_types }}' >> $GITHUB_ENV
          echo 'TF_VAR_region=${{ vars.TF_VAR_region }}' >> $GITHUB_ENV

      # Run Terraform commands using the dynamic directory set above
      - name: Terraform Init
        run: terraform init
        working-directory: ${{env.WORKING_DIR}}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: ${{ env.WORKING_DIR }}

      - name: Terraform Apply
        if: github.ref_name == 'dev' || (github.ref_name == 'main' && github.event_name == 'push')
        run: terraform apply -auto-approve
        working-directory: ${{ env.WORKING_DIR }}
      
      # Run Terraform output commands to extract cluster name  
      - name: Extract Cluster name
        id: tf_output
        run: | 
          CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
          echo "CLUSTER_NAME=$CLUSTER_NAME" >> $GITHUB_ENV
    
      # Install kubectl on the runner 
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: latest
      
      # Install Helm on the runner 
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: latest
  
      - name: Update kube-config
        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region ${{ vars.TF_VAR_region }}
      
      - name: Deploy Nginx with Helm
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm install nginx-deployment bitnami/nginx --namespace nginx --create-namespace --set service.type=LoadBalancer